/*
* generated by Xtext
*/

package org.codingvienna.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Dc6GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cCanvasAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCanvasCanvasParserRuleCall_0 = (RuleCall)cCanvasAssignment.eContents().get(0);
		
		//Model:
		//	canvas=Canvas;
		public ParserRule getRule() { return rule; }

		//canvas=Canvas
		public Assignment getCanvasAssignment() { return cCanvasAssignment; }

		//Canvas
		public RuleCall getCanvasCanvasParserRuleCall_0() { return cCanvasCanvasParserRuleCall_0; }
	}

	public class CanvasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Canvas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCanvasAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCanvasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSquaresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSquaresSquareParserRuleCall_2_0 = (RuleCall)cSquaresAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Canvas:
		//	{Canvas} "Canvas {" squares+=Square* "}";
		public ParserRule getRule() { return rule; }

		//{Canvas} "Canvas {" squares+=Square* "}"
		public Group getGroup() { return cGroup; }

		//{Canvas}
		public Action getCanvasAction_0() { return cCanvasAction_0; }

		//"Canvas {"
		public Keyword getCanvasKeyword_1() { return cCanvasKeyword_1; }

		//squares+=Square*
		public Assignment getSquaresAssignment_2() { return cSquaresAssignment_2; }

		//Square
		public RuleCall getSquaresSquareParserRuleCall_2_0() { return cSquaresSquareParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SquareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Square");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSquareAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSquareKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Assignment cSquaresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSquaresSquareParserRuleCall_4_0 = (RuleCall)cSquaresAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Square:
		//	{Square} "Square" "{" properties+=Properties* squares+=Square* "}";
		public ParserRule getRule() { return rule; }

		//{Square} "Square" "{" properties+=Properties* squares+=Square* "}"
		public Group getGroup() { return cGroup; }

		//{Square}
		public Action getSquareAction_0() { return cSquareAction_0; }

		//"Square"
		public Keyword getSquareKeyword_1() { return cSquareKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//properties+=Properties*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_3_0() { return cPropertiesPropertiesParserRuleCall_3_0; }

		//squares+=Square*
		public Assignment getSquaresAssignment_4() { return cSquaresAssignment_4; }

		//Square
		public RuleCall getSquaresSquareParserRuleCall_4_0() { return cSquaresSquareParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Properties");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCornerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCaptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Properties:
		//	Color | Corner | Location | Caption | Size;
		public ParserRule getRule() { return rule; }

		//Color | Corner | Location | Caption | Size
		public Alternatives getAlternatives() { return cAlternatives; }

		//Color
		public RuleCall getColorParserRuleCall_0() { return cColorParserRuleCall_0; }

		//Corner
		public RuleCall getCornerParserRuleCall_1() { return cCornerParserRuleCall_1; }

		//Location
		public RuleCall getLocationParserRuleCall_2() { return cLocationParserRuleCall_2; }

		//Caption
		public RuleCall getCaptionParserRuleCall_3() { return cCaptionParserRuleCall_3; }

		//Size
		public RuleCall getSizeParserRuleCall_4() { return cSizeParserRuleCall_4; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColorColorEnumEnumRuleCall_1_1_0 = (RuleCall)cColorAssignment_1_1.eContents().get(0);
		
		//Color:
		//	{Color} ("color" color=ColorEnum);
		public ParserRule getRule() { return rule; }

		//{Color} ("color" color=ColorEnum)
		public Group getGroup() { return cGroup; }

		//{Color}
		public Action getColorAction_0() { return cColorAction_0; }

		//"color" color=ColorEnum
		public Group getGroup_1() { return cGroup_1; }

		//"color"
		public Keyword getColorKeyword_1_0() { return cColorKeyword_1_0; }

		//color=ColorEnum
		public Assignment getColorAssignment_1_1() { return cColorAssignment_1_1; }

		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_1_1_0() { return cColorColorEnumEnumRuleCall_1_1_0; }
	}

	public class CornerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Corner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCornerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCornerKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCornerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCornerCornerEnumEnumRuleCall_1_1_0 = (RuleCall)cCornerAssignment_1_1.eContents().get(0);
		
		//Corner:
		//	{Corner} ("corner" corner=CornerEnum);
		public ParserRule getRule() { return rule; }

		//{Corner} ("corner" corner=CornerEnum)
		public Group getGroup() { return cGroup; }

		//{Corner}
		public Action getCornerAction_0() { return cCornerAction_0; }

		//"corner" corner=CornerEnum
		public Group getGroup_1() { return cGroup_1; }

		//"corner"
		public Keyword getCornerKeyword_1_0() { return cCornerKeyword_1_0; }

		//corner=CornerEnum
		public Assignment getCornerAssignment_1_1() { return cCornerAssignment_1_1; }

		//CornerEnum
		public RuleCall getCornerCornerEnumEnumRuleCall_1_1_0() { return cCornerCornerEnumEnumRuleCall_1_1_0; }
	}

	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLocationKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_1_0 = (RuleCall)cXAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cYAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_1_3_0 = (RuleCall)cYAssignment_1_3.eContents().get(0);
		
		//Location:
		//	{Location} ("location" x=INT ":" y=INT);
		public ParserRule getRule() { return rule; }

		//{Location} ("location" x=INT ":" y=INT)
		public Group getGroup() { return cGroup; }

		//{Location}
		public Action getLocationAction_0() { return cLocationAction_0; }

		//"location" x=INT ":" y=INT
		public Group getGroup_1() { return cGroup_1; }

		//"location"
		public Keyword getLocationKeyword_1_0() { return cLocationKeyword_1_0; }

		//x=INT
		public Assignment getXAssignment_1_1() { return cXAssignment_1_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_1_0() { return cXINTTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//y=INT
		public Assignment getYAssignment_1_3() { return cYAssignment_1_3; }

		//INT
		public RuleCall getYINTTerminalRuleCall_1_3_0() { return cYINTTerminalRuleCall_1_3_0; }
	}

	public class CaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Caption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCaptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCaptionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCaptionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCaptionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cCaptionAssignment_1_1.eContents().get(0);
		
		//Caption:
		//	{Caption} ("caption" caption=STRING);
		public ParserRule getRule() { return rule; }

		//{Caption} ("caption" caption=STRING)
		public Group getGroup() { return cGroup; }

		//{Caption}
		public Action getCaptionAction_0() { return cCaptionAction_0; }

		//"caption" caption=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"caption"
		public Keyword getCaptionKeyword_1_0() { return cCaptionKeyword_1_0; }

		//caption=STRING
		public Assignment getCaptionAssignment_1_1() { return cCaptionAssignment_1_1; }

		//STRING
		public RuleCall getCaptionSTRINGTerminalRuleCall_1_1_0() { return cCaptionSTRINGTerminalRuleCall_1_1_0; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWidthAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_1_0 = (RuleCall)cWidthAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cHeightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_1_3_0 = (RuleCall)cHeightAssignment_1_3.eContents().get(0);
		
		//Size:
		//	{Size} ("size" width=INT ":" height=INT);
		public ParserRule getRule() { return rule; }

		//{Size} ("size" width=INT ":" height=INT)
		public Group getGroup() { return cGroup; }

		//{Size}
		public Action getSizeAction_0() { return cSizeAction_0; }

		//"size" width=INT ":" height=INT
		public Group getGroup_1() { return cGroup_1; }

		//"size"
		public Keyword getSizeKeyword_1_0() { return cSizeKeyword_1_0; }

		//width=INT
		public Assignment getWidthAssignment_1_1() { return cWidthAssignment_1_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_1_0() { return cWidthINTTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//height=INT
		public Assignment getHeightAssignment_1_3() { return cHeightAssignment_1_3; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_1_3_0() { return cHeightINTTerminalRuleCall_1_3_0; }
	}
	
	
	public class ColorEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColorEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREENGreenKeyword_1_0 = (Keyword)cGREENEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBlueKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ColorEnum:
		//	RED="red" | GREEN="green" | BLUE="blue";
		public EnumRule getRule() { return rule; }

		//RED="red" | GREEN="green" | BLUE="blue"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }

		//"red"
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }

		//GREEN="green"
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_1() { return cGREENEnumLiteralDeclaration_1; }

		//"green"
		public Keyword getGREENGreenKeyword_1_0() { return cGREENGreenKeyword_1_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }

		//"blue"
		public Keyword getBLUEBlueKeyword_2_0() { return cBLUEBlueKeyword_2_0; }
	}

	public class CornerEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CornerEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cROUNDEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cROUNDEDRoundedKeyword_0_0 = (Keyword)cROUNDEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEFAULTDefaultKeyword_1_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CornerEnum:
		//	ROUNDED="rounded" | DEFAULT="default";
		public EnumRule getRule() { return rule; }

		//ROUNDED="rounded" | DEFAULT="default"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ROUNDED="rounded"
		public EnumLiteralDeclaration getROUNDEDEnumLiteralDeclaration_0() { return cROUNDEDEnumLiteralDeclaration_0; }

		//"rounded"
		public Keyword getROUNDEDRoundedKeyword_0_0() { return cROUNDEDRoundedKeyword_0_0; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_1() { return cDEFAULTEnumLiteralDeclaration_1; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_1_0() { return cDEFAULTDefaultKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private CanvasElements pCanvas;
	private SquareElements pSquare;
	private PropertiesElements pProperties;
	private ColorElements pColor;
	private CornerElements pCorner;
	private LocationElements pLocation;
	private CaptionElements pCaption;
	private SizeElements pSize;
	private ColorEnumElements unknownRuleColorEnum;
	private CornerEnumElements unknownRuleCornerEnum;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Dc6GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.codingvienna.Dc6".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	canvas=Canvas;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Canvas:
	//	{Canvas} "Canvas {" squares+=Square* "}";
	public CanvasElements getCanvasAccess() {
		return (pCanvas != null) ? pCanvas : (pCanvas = new CanvasElements());
	}
	
	public ParserRule getCanvasRule() {
		return getCanvasAccess().getRule();
	}

	//Square:
	//	{Square} "Square" "{" properties+=Properties* squares+=Square* "}";
	public SquareElements getSquareAccess() {
		return (pSquare != null) ? pSquare : (pSquare = new SquareElements());
	}
	
	public ParserRule getSquareRule() {
		return getSquareAccess().getRule();
	}

	//Properties:
	//	Color | Corner | Location | Caption | Size;
	public PropertiesElements getPropertiesAccess() {
		return (pProperties != null) ? pProperties : (pProperties = new PropertiesElements());
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}

	//Color:
	//	{Color} ("color" color=ColorEnum);
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//Corner:
	//	{Corner} ("corner" corner=CornerEnum);
	public CornerElements getCornerAccess() {
		return (pCorner != null) ? pCorner : (pCorner = new CornerElements());
	}
	
	public ParserRule getCornerRule() {
		return getCornerAccess().getRule();
	}

	//Location:
	//	{Location} ("location" x=INT ":" y=INT);
	public LocationElements getLocationAccess() {
		return (pLocation != null) ? pLocation : (pLocation = new LocationElements());
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}

	//Caption:
	//	{Caption} ("caption" caption=STRING);
	public CaptionElements getCaptionAccess() {
		return (pCaption != null) ? pCaption : (pCaption = new CaptionElements());
	}
	
	public ParserRule getCaptionRule() {
		return getCaptionAccess().getRule();
	}

	//Size:
	//	{Size} ("size" width=INT ":" height=INT);
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//enum ColorEnum:
	//	RED="red" | GREEN="green" | BLUE="blue";
	public ColorEnumElements getColorEnumAccess() {
		return (unknownRuleColorEnum != null) ? unknownRuleColorEnum : (unknownRuleColorEnum = new ColorEnumElements());
	}
	
	public EnumRule getColorEnumRule() {
		return getColorEnumAccess().getRule();
	}

	//enum CornerEnum:
	//	ROUNDED="rounded" | DEFAULT="default";
	public CornerEnumElements getCornerEnumAccess() {
		return (unknownRuleCornerEnum != null) ? unknownRuleCornerEnum : (unknownRuleCornerEnum = new CornerEnumElements());
	}
	
	public EnumRule getCornerEnumRule() {
		return getCornerEnumAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
