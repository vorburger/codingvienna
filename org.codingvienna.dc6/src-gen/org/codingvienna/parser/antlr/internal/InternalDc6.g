/*
* generated by Xtext
*/
grammar InternalDc6;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.codingvienna.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.codingvienna.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.codingvienna.services.Dc6GrammarAccess;

}

@parser::members {

 	private Dc6GrammarAccess grammarAccess;
 	
    public InternalDc6Parser(TokenStream input, Dc6GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Dc6GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCanvasCanvasParserRuleCall_0()); 
	    }
		lv_canvas_0_0=ruleCanvas		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"canvas",
        		lv_canvas_0_0, 
        		"Canvas");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCanvas
entryRuleCanvas returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCanvasRule()); }
	 iv_ruleCanvas=ruleCanvas 
	 { $current=$iv_ruleCanvas.current; } 
	 EOF 
;

// Rule Canvas
ruleCanvas returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCanvasAccess().getCanvasAction_0(),
            $current);
    }
)	otherlv_1='Canvas {' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCanvasAccess().getCanvasKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCanvasAccess().getSquaresSquareParserRuleCall_2_0()); 
	    }
		lv_squares_2_0=ruleSquare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCanvasRule());
	        }
       		add(
       			$current, 
       			"squares",
        		lv_squares_2_0, 
        		"Square");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCanvasAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSquare
entryRuleSquare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSquareRule()); }
	 iv_ruleSquare=ruleSquare 
	 { $current=$iv_ruleSquare.current; } 
	 EOF 
;

// Rule Square
ruleSquare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSquareAccess().getSquareAction_0(),
            $current);
    }
)	otherlv_1='Square' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSquareAccess().getSquareKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSquareAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSquareAccess().getPropertiesPropertiesParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSquareRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"Properties");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSquareAccess().getSquaresSquareParserRuleCall_4_0()); 
	    }
		lv_squares_4_0=ruleSquare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSquareRule());
	        }
       		add(
       			$current, 
       			"squares",
        		lv_squares_4_0, 
        		"Square");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSquareAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleProperties
entryRuleProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertiesRule()); }
	 iv_ruleProperties=ruleProperties 
	 { $current=$iv_ruleProperties.current; } 
	 EOF 
;

// Rule Properties
ruleProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertiesAccess().getColorParserRuleCall_0()); 
    }
    this_Color_0=ruleColor
    { 
        $current = $this_Color_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertiesAccess().getCornerParserRuleCall_1()); 
    }
    this_Corner_1=ruleCorner
    { 
        $current = $this_Corner_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertiesAccess().getLocationParserRuleCall_2()); 
    }
    this_Location_2=ruleLocation
    { 
        $current = $this_Location_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertiesAccess().getCaptionParserRuleCall_3()); 
    }
    this_Caption_3=ruleCaption
    { 
        $current = $this_Caption_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertiesAccess().getSizeParserRuleCall_4()); 
    }
    this_Size_4=ruleSize
    { 
        $current = $this_Size_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current; } 
	 EOF 
;

// Rule Color
ruleColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColorAccess().getColorAction_0(),
            $current);
    }
)(	otherlv_1='color' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColorAccess().getColorKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorAccess().getColorColorEnumEnumRuleCall_1_1_0()); 
	    }
		lv_color_2_0=ruleColorEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_2_0, 
        		"ColorEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleCorner
entryRuleCorner returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCornerRule()); }
	 iv_ruleCorner=ruleCorner 
	 { $current=$iv_ruleCorner.current; } 
	 EOF 
;

// Rule Corner
ruleCorner returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCornerAccess().getCornerAction_0(),
            $current);
    }
)(	otherlv_1='corner' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCornerAccess().getCornerKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCornerAccess().getCornerCornerEnumEnumRuleCall_1_1_0()); 
	    }
		lv_corner_2_0=ruleCornerEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCornerRule());
	        }
       		set(
       			$current, 
       			"corner",
        		lv_corner_2_0, 
        		"CornerEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleLocation
entryRuleLocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocationRule()); }
	 iv_ruleLocation=ruleLocation 
	 { $current=$iv_ruleLocation.current; } 
	 EOF 
;

// Rule Location
ruleLocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLocationAccess().getLocationAction_0(),
            $current);
    }
)(	otherlv_1='location' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocationAccess().getLocationKeyword_1_0());
    }
(
(
		lv_x_2_0=RULE_INT
		{
			newLeafNode(lv_x_2_0, grammarAccess.getLocationAccess().getXINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_2_0, 
        		"INT");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocationAccess().getColonKeyword_1_2());
    }
(
(
		lv_y_4_0=RULE_INT
		{
			newLeafNode(lv_y_4_0, grammarAccess.getLocationAccess().getYINTTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_4_0, 
        		"INT");
	    }

)
)))
;





// Entry rule entryRuleCaption
entryRuleCaption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaptionRule()); }
	 iv_ruleCaption=ruleCaption 
	 { $current=$iv_ruleCaption.current; } 
	 EOF 
;

// Rule Caption
ruleCaption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCaptionAccess().getCaptionAction_0(),
            $current);
    }
)(	otherlv_1='caption' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaptionAccess().getCaptionKeyword_1_0());
    }
(
(
		lv_caption_2_0=RULE_STRING
		{
			newLeafNode(lv_caption_2_0, grammarAccess.getCaptionAccess().getCaptionSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCaptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"caption",
        		lv_caption_2_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	 iv_ruleSize=ruleSize 
	 { $current=$iv_ruleSize.current; } 
	 EOF 
;

// Rule Size
ruleSize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSizeAccess().getSizeAction_0(),
            $current);
    }
)(	otherlv_1='size' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSizeAccess().getSizeKeyword_1_0());
    }
(
(
		lv_width_2_0=RULE_INT
		{
			newLeafNode(lv_width_2_0, grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSizeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"width",
        		lv_width_2_0, 
        		"INT");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSizeAccess().getColonKeyword_1_2());
    }
(
(
		lv_height_4_0=RULE_INT
		{
			newLeafNode(lv_height_4_0, grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSizeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"height",
        		lv_height_4_0, 
        		"INT");
	    }

)
)))
;





// Rule ColorEnum
ruleColorEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='red' 
	{
        $current = grammarAccess.getColorEnumAccess().getREDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getColorEnumAccess().getREDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='green' 
	{
        $current = grammarAccess.getColorEnumAccess().getGREENEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getColorEnumAccess().getGREENEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='blue' 
	{
        $current = grammarAccess.getColorEnumAccess().getBLUEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getColorEnumAccess().getBLUEEnumLiteralDeclaration_2()); 
    }
));



// Rule CornerEnum
ruleCornerEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='rounded' 
	{
        $current = grammarAccess.getCornerEnumAccess().getROUNDEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCornerEnumAccess().getROUNDEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='default' 
	{
        $current = grammarAccess.getCornerEnumAccess().getDEFAULTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCornerEnumAccess().getDEFAULTEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


