/*
* generated by Xtext
*/
package org.codingvienna.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.codingvienna.services.Dc6GrammarAccess;

public class Dc6Parser extends AbstractContentAssistParser {
	
	@Inject
	private Dc6GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.codingvienna.ui.contentassist.antlr.internal.InternalDc6Parser createParser() {
		org.codingvienna.ui.contentassist.antlr.internal.InternalDc6Parser result = new org.codingvienna.ui.contentassist.antlr.internal.InternalDc6Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPropertiesAccess().getAlternatives(), "rule__Properties__Alternatives");
					put(grammarAccess.getColorEnumAccess().getAlternatives(), "rule__ColorEnum__Alternatives");
					put(grammarAccess.getCornerEnumAccess().getAlternatives(), "rule__CornerEnum__Alternatives");
					put(grammarAccess.getCanvasAccess().getGroup(), "rule__Canvas__Group__0");
					put(grammarAccess.getSquareAccess().getGroup(), "rule__Square__Group__0");
					put(grammarAccess.getColorAccess().getGroup(), "rule__Color__Group__0");
					put(grammarAccess.getColorAccess().getGroup_1(), "rule__Color__Group_1__0");
					put(grammarAccess.getCornerAccess().getGroup(), "rule__Corner__Group__0");
					put(grammarAccess.getCornerAccess().getGroup_1(), "rule__Corner__Group_1__0");
					put(grammarAccess.getLocationAccess().getGroup(), "rule__Location__Group__0");
					put(grammarAccess.getLocationAccess().getGroup_1(), "rule__Location__Group_1__0");
					put(grammarAccess.getCaptionAccess().getGroup(), "rule__Caption__Group__0");
					put(grammarAccess.getCaptionAccess().getGroup_1(), "rule__Caption__Group_1__0");
					put(grammarAccess.getSizeAccess().getGroup(), "rule__Size__Group__0");
					put(grammarAccess.getSizeAccess().getGroup_1(), "rule__Size__Group_1__0");
					put(grammarAccess.getModelAccess().getCanvasAssignment(), "rule__Model__CanvasAssignment");
					put(grammarAccess.getCanvasAccess().getSquaresAssignment_2(), "rule__Canvas__SquaresAssignment_2");
					put(grammarAccess.getSquareAccess().getPropertiesAssignment_3(), "rule__Square__PropertiesAssignment_3");
					put(grammarAccess.getSquareAccess().getSquaresAssignment_4(), "rule__Square__SquaresAssignment_4");
					put(grammarAccess.getColorAccess().getColorAssignment_1_1(), "rule__Color__ColorAssignment_1_1");
					put(grammarAccess.getCornerAccess().getCornerAssignment_1_1(), "rule__Corner__CornerAssignment_1_1");
					put(grammarAccess.getLocationAccess().getXAssignment_1_1(), "rule__Location__XAssignment_1_1");
					put(grammarAccess.getLocationAccess().getYAssignment_1_3(), "rule__Location__YAssignment_1_3");
					put(grammarAccess.getCaptionAccess().getCaptionAssignment_1_1(), "rule__Caption__CaptionAssignment_1_1");
					put(grammarAccess.getSizeAccess().getWidthAssignment_1_1(), "rule__Size__WidthAssignment_1_1");
					put(grammarAccess.getSizeAccess().getHeightAssignment_1_3(), "rule__Size__HeightAssignment_1_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.codingvienna.ui.contentassist.antlr.internal.InternalDc6Parser typedParser = (org.codingvienna.ui.contentassist.antlr.internal.InternalDc6Parser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Dc6GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Dc6GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
