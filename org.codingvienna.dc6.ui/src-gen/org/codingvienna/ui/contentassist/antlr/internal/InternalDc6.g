/*
* generated by Xtext
*/
grammar InternalDc6;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.codingvienna.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.codingvienna.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.codingvienna.services.Dc6GrammarAccess;

}

@parser::members {
 
 	private Dc6GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Dc6GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getCanvasAssignment()); }
(rule__Model__CanvasAssignment)
{ after(grammarAccess.getModelAccess().getCanvasAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCanvas
entryRuleCanvas 
:
{ before(grammarAccess.getCanvasRule()); }
	 ruleCanvas
{ after(grammarAccess.getCanvasRule()); } 
	 EOF 
;

// Rule Canvas
ruleCanvas
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCanvasAccess().getGroup()); }
(rule__Canvas__Group__0)
{ after(grammarAccess.getCanvasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSquare
entryRuleSquare 
:
{ before(grammarAccess.getSquareRule()); }
	 ruleSquare
{ after(grammarAccess.getSquareRule()); } 
	 EOF 
;

// Rule Square
ruleSquare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSquareAccess().getGroup()); }
(rule__Square__Group__0)
{ after(grammarAccess.getSquareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperties
entryRuleProperties 
:
{ before(grammarAccess.getPropertiesRule()); }
	 ruleProperties
{ after(grammarAccess.getPropertiesRule()); } 
	 EOF 
;

// Rule Properties
ruleProperties
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertiesAccess().getAlternatives()); }
(rule__Properties__Alternatives)
{ after(grammarAccess.getPropertiesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColor
entryRuleColor 
:
{ before(grammarAccess.getColorRule()); }
	 ruleColor
{ after(grammarAccess.getColorRule()); } 
	 EOF 
;

// Rule Color
ruleColor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColorAccess().getGroup()); }
(rule__Color__Group__0)
{ after(grammarAccess.getColorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCorner
entryRuleCorner 
:
{ before(grammarAccess.getCornerRule()); }
	 ruleCorner
{ after(grammarAccess.getCornerRule()); } 
	 EOF 
;

// Rule Corner
ruleCorner
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCornerAccess().getGroup()); }
(rule__Corner__Group__0)
{ after(grammarAccess.getCornerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocation
entryRuleLocation 
:
{ before(grammarAccess.getLocationRule()); }
	 ruleLocation
{ after(grammarAccess.getLocationRule()); } 
	 EOF 
;

// Rule Location
ruleLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationAccess().getGroup()); }
(rule__Location__Group__0)
{ after(grammarAccess.getLocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaption
entryRuleCaption 
:
{ before(grammarAccess.getCaptionRule()); }
	 ruleCaption
{ after(grammarAccess.getCaptionRule()); } 
	 EOF 
;

// Rule Caption
ruleCaption
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaptionAccess().getGroup()); }
(rule__Caption__Group__0)
{ after(grammarAccess.getCaptionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSize
entryRuleSize 
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSizeAccess().getGroup()); }
(rule__Size__Group__0)
{ after(grammarAccess.getSizeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ColorEnum
ruleColorEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorEnumAccess().getAlternatives()); }
(rule__ColorEnum__Alternatives)
{ after(grammarAccess.getColorEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CornerEnum
ruleCornerEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerEnumAccess().getAlternatives()); }
(rule__CornerEnum__Alternatives)
{ after(grammarAccess.getCornerEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Properties__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertiesAccess().getColorParserRuleCall_0()); }
	ruleColor
{ after(grammarAccess.getPropertiesAccess().getColorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPropertiesAccess().getCornerParserRuleCall_1()); }
	ruleCorner
{ after(grammarAccess.getPropertiesAccess().getCornerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPropertiesAccess().getLocationParserRuleCall_2()); }
	ruleLocation
{ after(grammarAccess.getPropertiesAccess().getLocationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPropertiesAccess().getCaptionParserRuleCall_3()); }
	ruleCaption
{ after(grammarAccess.getPropertiesAccess().getCaptionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPropertiesAccess().getSizeParserRuleCall_4()); }
	ruleSize
{ after(grammarAccess.getPropertiesAccess().getSizeParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColorEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorEnumAccess().getREDEnumLiteralDeclaration_0()); }
(	'red' 
)
{ after(grammarAccess.getColorEnumAccess().getREDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getColorEnumAccess().getGREENEnumLiteralDeclaration_1()); }
(	'green' 
)
{ after(grammarAccess.getColorEnumAccess().getGREENEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getColorEnumAccess().getBLUEEnumLiteralDeclaration_2()); }
(	'blue' 
)
{ after(grammarAccess.getColorEnumAccess().getBLUEEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CornerEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerEnumAccess().getROUNDEDEnumLiteralDeclaration_0()); }
(	'rounded' 
)
{ after(grammarAccess.getCornerEnumAccess().getROUNDEDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCornerEnumAccess().getDEFAULTEnumLiteralDeclaration_1()); }
(	'default' 
)
{ after(grammarAccess.getCornerEnumAccess().getDEFAULTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Canvas__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__0__Impl
	rule__Canvas__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getCanvasAction_0()); }
(

)
{ after(grammarAccess.getCanvasAccess().getCanvasAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__1__Impl
	rule__Canvas__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getCanvasKeyword_1()); }

	'Canvas {' 

{ after(grammarAccess.getCanvasAccess().getCanvasKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__2__Impl
	rule__Canvas__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getSquaresAssignment_2()); }
(rule__Canvas__SquaresAssignment_2)*
{ after(grammarAccess.getCanvasAccess().getSquaresAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getCanvasAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Square__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Square__Group__0__Impl
	rule__Square__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getSquareAction_0()); }
(

)
{ after(grammarAccess.getSquareAccess().getSquareAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Square__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Square__Group__1__Impl
	rule__Square__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getSquareKeyword_1()); }

	'Square' 

{ after(grammarAccess.getSquareAccess().getSquareKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Square__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Square__Group__2__Impl
	rule__Square__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSquareAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Square__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Square__Group__3__Impl
	rule__Square__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getPropertiesAssignment_3()); }
(rule__Square__PropertiesAssignment_3)*
{ after(grammarAccess.getSquareAccess().getPropertiesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Square__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Square__Group__4__Impl
	rule__Square__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getSquaresAssignment_4()); }
(rule__Square__SquaresAssignment_4)*
{ after(grammarAccess.getSquareAccess().getSquaresAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Square__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Square__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Square__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSquareAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Color__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Color__Group__0__Impl
	rule__Color__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getColorAction_0()); }
(

)
{ after(grammarAccess.getColorAccess().getColorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Color__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Color__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getGroup_1()); }
(rule__Color__Group_1__0)
{ after(grammarAccess.getColorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Color__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Color__Group_1__0__Impl
	rule__Color__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getColorKeyword_1_0()); }

	'color' 

{ after(grammarAccess.getColorAccess().getColorKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Color__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Color__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getColorAssignment_1_1()); }
(rule__Color__ColorAssignment_1_1)
{ after(grammarAccess.getColorAccess().getColorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Corner__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group__0__Impl
	rule__Corner__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getCornerAction_0()); }
(

)
{ after(grammarAccess.getCornerAccess().getCornerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Corner__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getGroup_1()); }
(rule__Corner__Group_1__0)
{ after(grammarAccess.getCornerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Corner__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group_1__0__Impl
	rule__Corner__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getCornerKeyword_1_0()); }

	'corner' 

{ after(grammarAccess.getCornerAccess().getCornerKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Corner__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Corner__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getCornerAssignment_1_1()); }
(rule__Corner__CornerAssignment_1_1)
{ after(grammarAccess.getCornerAccess().getCornerAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Location__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__0__Impl
	rule__Location__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getLocationAction_0()); }
(

)
{ after(grammarAccess.getLocationAccess().getLocationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getGroup_1()); }
(rule__Location__Group_1__0)
{ after(grammarAccess.getLocationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Location__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_1__0__Impl
	rule__Location__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getLocationKeyword_1_0()); }

	'location' 

{ after(grammarAccess.getLocationAccess().getLocationKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_1__1__Impl
	rule__Location__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getXAssignment_1_1()); }
(rule__Location__XAssignment_1_1)
{ after(grammarAccess.getLocationAccess().getXAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_1__2__Impl
	rule__Location__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getColonKeyword_1_2()); }

	':' 

{ after(grammarAccess.getLocationAccess().getColonKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getYAssignment_1_3()); }
(rule__Location__YAssignment_1_3)
{ after(grammarAccess.getLocationAccess().getYAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Caption__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Caption__Group__0__Impl
	rule__Caption__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Caption__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaptionAccess().getCaptionAction_0()); }
(

)
{ after(grammarAccess.getCaptionAccess().getCaptionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Caption__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Caption__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Caption__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaptionAccess().getGroup_1()); }
(rule__Caption__Group_1__0)
{ after(grammarAccess.getCaptionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Caption__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Caption__Group_1__0__Impl
	rule__Caption__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Caption__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaptionAccess().getCaptionKeyword_1_0()); }

	'caption' 

{ after(grammarAccess.getCaptionAccess().getCaptionKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Caption__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Caption__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Caption__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaptionAccess().getCaptionAssignment_1_1()); }
(rule__Caption__CaptionAssignment_1_1)
{ after(grammarAccess.getCaptionAccess().getCaptionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Size__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getSizeAction_0()); }
(

)
{ after(grammarAccess.getSizeAccess().getSizeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Size__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getGroup_1()); }
(rule__Size__Group_1__0)
{ after(grammarAccess.getSizeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Size__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Size__Group_1__0__Impl
	rule__Size__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getSizeKeyword_1_0()); }

	'size' 

{ after(grammarAccess.getSizeAccess().getSizeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Size__Group_1__1__Impl
	rule__Size__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getWidthAssignment_1_1()); }
(rule__Size__WidthAssignment_1_1)
{ after(grammarAccess.getSizeAccess().getWidthAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Size__Group_1__2__Impl
	rule__Size__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getColonKeyword_1_2()); }

	':' 

{ after(grammarAccess.getSizeAccess().getColonKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Size__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getHeightAssignment_1_3()); }
(rule__Size__HeightAssignment_1_3)
{ after(grammarAccess.getSizeAccess().getHeightAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__CanvasAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCanvasCanvasParserRuleCall_0()); }
	ruleCanvas{ after(grammarAccess.getModelAccess().getCanvasCanvasParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__SquaresAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getSquaresSquareParserRuleCall_2_0()); }
	ruleSquare{ after(grammarAccess.getCanvasAccess().getSquaresSquareParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Square__PropertiesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getPropertiesPropertiesParserRuleCall_3_0()); }
	ruleProperties{ after(grammarAccess.getSquareAccess().getPropertiesPropertiesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Square__SquaresAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSquareAccess().getSquaresSquareParserRuleCall_4_0()); }
	ruleSquare{ after(grammarAccess.getSquareAccess().getSquaresSquareParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Color__ColorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getColorColorEnumEnumRuleCall_1_1_0()); }
	ruleColorEnum{ after(grammarAccess.getColorAccess().getColorColorEnumEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Corner__CornerAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCornerAccess().getCornerCornerEnumEnumRuleCall_1_1_0()); }
	ruleCornerEnum{ after(grammarAccess.getCornerAccess().getCornerCornerEnumEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__XAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getXINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getLocationAccess().getXINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__YAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getYINTTerminalRuleCall_1_3_0()); }
	RULE_INT{ after(grammarAccess.getLocationAccess().getYINTTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Caption__CaptionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaptionAccess().getCaptionSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getCaptionAccess().getCaptionSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Size__WidthAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Size__HeightAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_1_3_0()); }
	RULE_INT{ after(grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


